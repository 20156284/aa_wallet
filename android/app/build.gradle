def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def dartEnv = [APP_ENV: '',]
if (project.hasProperty('dart-defines')) {
    dartEnv = dartEnv + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                if (pair.contains("Release")) {
                    [(pair.first()): '']
                } else {
                    [(pair.first()): pair.last()]
                }
            }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


android {
    compileSdkVersion 30

    signingConfigs {
//        debug {
//            keyAlias 'debug'
//            keyPassword 'whatever'
//            storeFile file('../SugarPark.jks')
//            storePassword 'whatever'
//        }
        release {
            keyAlias 'release'
            keyPassword 'whatever'
            storeFile file('../key.jks')
            storePassword 'whatever'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.will.aa_wallet"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "app_name", "AAToken${dartEnv.APP_ENV}"

        multiDexEnabled true
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        profile {
            signingConfig signingConfigs.release

            // Enables code shrinking, obfuscation, and optimization for only your project's release build type.
            minifyEnabled true
            // Enables resource shrinking, which is performed by the Android Gradle plugin.
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release

            // Enables code shrinking, obfuscation, and optimization for only your project's release build type.
            minifyEnabled true
            // Enables resource shrinking, which is performed by the Android Gradle plugin.
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
}